from django.conf import settings
from django.contrib.auth import get_user_model
from django.db.models import Count, Exists, OuterRef
from django.shortcuts import get_object_or_404, redirect
from django_filters.rest_framework import DjangoFilterBackend
from djoser.views import UserViewSet
from rest_framework import status, viewsets
from rest_framework.decorators import action
from rest_framework.permissions import (SAFE_METHODS, AllowAny,
                                        IsAuthenticated,
                                        IsAuthenticatedOrReadOnly)
from rest_framework.response import Response

from api.filters import IngredientFilter, RecipeFilter
from api.pagination import FoodgramPagination
from api.permissions import IsAuthorOrStaff
from api.serializers import (AvatarSerializer, FavoriteSerializer,
                             IngredientSerializer, NewUserSerializer,
                             RecipeIWriteSerializer, RecipeReadSerializer,
                             SubscribeActionSerializer, SubscriptionSerializer,
                             TagSerializer, UserCreateSerializer)
from recipes.models import (Favorite, Ingredient, IngredientRecipe, Recipe,
                            ShoppingCart, Tag)
from users.models import Subscription

User = get_user_model()


class UserViewSet(UserViewSet):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π UserViewSet –Ω–∞ –æ—Å–Ω–æ–≤–µ Djoser."""
    serializer_class = NewUserSerializer
    permission_classes = (AllowAny,)

    def get_serializer_class(self):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞."""
        if self.action == "create":
            return UserCreateSerializer
        if self.action == "me":
            return NewUserSerializer
        return super().get_serializer_class()

    @action(
        detail=True, methods=["post"], permission_classes=[IsAuthenticated])
    def subscribe(self, request, pk=None):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        print(f"üìå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {request.user} -> {pk}")
        subscribed_to = get_object_or_404(User, pk=pk)
        if request.user == subscribed_to:
            return Response({"detail": "–ù–µ–ª—å–∑—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è."},
                            status=status.HTTP_400_BAD_REQUEST)

        serializer = SubscribeActionSerializer(
            data={
                "subscribed_to": subscribed_to.id}, context={
                    "request": request}
        )
        serializer.is_valid(raise_exception=True)
        subscription = serializer.save()
        return Response(
            SubscriptionSerializer(subscription).data,
            status=status.HTTP_201_CREATED)

    @action(
        detail=True, methods=["delete"],
        permission_classes=[IsAuthenticated])
    def unsubscribe(self, request, pk=None):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        deleted_count, _ = Subscription.objects.filter(
            user=request.user, subscribed_to__id=pk).delete()
        if deleted_count == 0:
            return Response({"detail": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."},
                            status=status.HTTP_404_NOT_FOUND)
        return Response(status=status.HTTP_204_NO_CONTENT)

    @action(
        detail=False, methods=["get"], permission_classes=[IsAuthenticated])
    def subscriptions(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        current_user = request.user
        queryset = (User.objects.filter(subscribers__user=current_user)
                    .annotate(
                        recipes_count=Count("recipes"),
                        is_subscribed=Exists(
                            Subscription.objects.filter(
                                user=current_user,
                                subscribed_to=OuterRef("pk"))),).order_by(
                                    "-date_joined"))
        paginator = FoodgramPagination()
        paginated_queryset = paginator.paginate_queryset(queryset, request)
        serializer = SubscriptionSerializer(paginated_queryset, many=True)
        return paginator.get_paginated_response(serializer.data)

    @action(detail=False, methods=["put", "delete"],
            permission_classes=[IsAuthenticated])
    def avatar(self, request):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = request.user
        if request.method == "PUT":
            serializer = AvatarSerializer(
                user, data=request.data, partial=True)
            serializer.is_valid(raise_exception=True)
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        if request.method == "DELETE":
            if user.avatar:
                user.avatar.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)


class TagViewSet(viewsets.ReadOnlyModelViewSet):
    """list() –∏ retrieve() –¥–ª—è –º–æ–¥–µ–ª–∏ Tag."""

    queryset = Tag.objects.all()
    serializer_class = TagSerializer
    permission_classes = (IsAuthenticatedOrReadOnly,)
    pagination_class = None


class IngredientViewSet(viewsets.ReadOnlyModelViewSet):
    """list() –∏ retrieve() –¥–ª—è –º–æ–¥–µ–ª–∏ Ingridient."""

    queryset = Ingredient.objects.all()
    serializer_class = IngredientSerializer
    permission_classes = (IsAuthenticatedOrReadOnly,)
    filter_backends = (DjangoFilterBackend,)
    filterset_class = IngredientFilter
    pagination_class = None


class RecipeViewSet(viewsets.ModelViewSet):
    """CRUD –¥–ª—è –º–æ–¥–µ–ª–∏ Recipe."""

    permission_classes = (IsAuthorOrStaff,)
    filter_backends = (DjangoFilterBackend,)
    filterset_class = RecipeFilter

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç QuerySet —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
        """—Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ' –∏ '–≤ –∫–æ—Ä–∑–∏–Ω–µ'."""
        user = None
        if self.request.user.is_authenticated:
            user = self.request.user
        return (
            Recipe.objects
            .prefetch_related("ingredients", "tags")
            .select_related("author")
            .annotate(
                is_favorited=Exists(
                    Favorite.objects.filter(
                        user=user, recipe=OuterRef("pk"))
                ),
                is_in_shopping_cart=Exists(
                    ShoppingCart.objects.filter(
                        user=user, recipe=OuterRef("pk"))
                ),
            )
        )

    @action(detail=False, methods=["get"], url_path="download_shopping_cart")
    def download_shopping_cart(self, request):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt."""
        ingredients = IngredientRecipe.objects.filter(
            recipe__cart_users__user=request.user
        ).select_related("ingredient")

        content = self._generate_shopping_cart(ingredients)
        response = Response(content, content_type="text/plain")
        response[
            "Content-Disposition"] = 'attachment; filename="shopping_list.txt"'
        return response

    def _generate_shopping_cart(self, ingredients):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∫—É–ø–æ–∫."""
        in_cart = {}
        for ingredient in ingredients:
            ingredient_name = ingredient.ingredient.name
            measurement_unit = ingredient.ingredient.measurement_unit
            amount = ingredient.amount

            in_cart[(ingredient_name, measurement_unit)] = (
                in_cart.get((ingredient_name, measurement_unit), 0) + amount
            )

        return "\n".join(
            f"{name} - {amount} ({unit})"
            for (name, unit), amount in in_cart.items()
        )

    @action(
        detail=False,
        methods=["get"],
        url_path="short-link/(?P<short_link>[^/.]+)"
    )
    def get_by_short_link(self, request, short_link):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –æ–±—ä–µ–∫—Ç —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ."""
        recipe = get_object_or_404(Recipe, short_link=short_link)
        recipe_url = f"{settings.BASE_URL}/recipes/{recipe.id}/"
        return redirect(recipe_url)

    @action(
        detail=True, methods=["post", "delete"], url_path="favorite"
    )
    def manage_favorites(self, request, pk=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ."""
        recipe = get_object_or_404(Recipe, id=pk)

        if request.method == "POST":
            serializer = FavoriteSerializer(
                data={"recipe": recipe.id}, context={"request": request}
            )
            if serializer.is_valid():
                fav_item = serializer.save()
                return Response(
                    self.get_serializer(fav_item).data,
                    status=status.HTTP_201_CREATED,
                )
            return Response(
                serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        elif request.method == "DELETE":
            deleted_count, _ = Favorite.objects.filter(
                user=request.user, recipe=recipe
            ).delete()

            if deleted_count == 0:
                return Response(
                    {"detail": "–†–µ—Ü–µ–ø—Ç–∞ –Ω–µ—Ç –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–º."},
                    status=status.HTTP_400_BAD_REQUEST,
                )
            return Response(status=status.HTTP_204_NO_CONTENT)

    @action(detail=True, methods=["post", "delete"], url_path="shopping_cart")
    def manage_shopping_cart(self, request, pk=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
        recipe = get_object_or_404(Recipe, pk=pk)

        if request.method == "POST":
            ShoppingCart.objects.get_or_create(
                user=request.user, recipe=recipe)
            return Response({
                "detail": "–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É."}, status=201)

        deleted, _ = ShoppingCart.objects.filter(
            user=request.user, recipe=recipe).delete()
        if deleted:
            return Response(
                {"detail": "–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."}, status=204)
        return Response(
            {"detail": "–†–µ—Ü–µ–ø—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ."}, status=400)

    def get_serializer_class(self):
        """–í—ã–±–æ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞."""
        if self.request.method in SAFE_METHODS:
            return RecipeReadSerializer
        return RecipeIWriteSerializer

    def get_serializer_context(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç 'request' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞."""
        context = super().get_serializer_context()
        context.update({"request": self.request})
        return context
